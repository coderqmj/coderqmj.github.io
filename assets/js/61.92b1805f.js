(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{573:function(_,l,v){"use strict";v.r(l);var t=v(44),i=Object(t.a)({},(function(){var _=this,l=_.$createElement,v=_._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h3",{attrs:{id:"一、代理cdn"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、代理cdn"}},[_._v("#")]),_._v(" 一、代理CDN")]),_._v(" "),v("h4",{attrs:{id:"_1-1代理服务器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1代理服务器"}},[_._v("#")]),_._v(" 1.1代理服务器")]),_._v(" "),v("ul",[v("li",[_._v("普通情况下，向代理服务器发起请求再返回即可，只需设计两台机器")]),_._v(" "),v("li",[_._v("但是有些时候会由通过代理服务器去和真实服务器交流，就和租房子的中介一样，多了个中间人")]),_._v(" "),v("li",[_._v("代理服务器本身不产生内容，处于中间位置，去转发上下游的请求和响应")]),_._v(" "),v("li",[_._v("根据请求和响应，它既可以当成服务器也可以当成客户端")]),_._v(" "),v("li",[_._v("那为什么需要代理服务器呢？\n"),v("ul",[v("li",[_._v("有的时候客户端是没有办法直接连上对应的服务器的，就比如Google，直接访问肯定不行，需要代理上可以访问Google的服务器")])])])]),_._v(" "),v("h4",{attrs:{id:"_1-2正向代理与反向代理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2正向代理与反向代理"}},[_._v("#")]),_._v(" 1.2正向代理与反向代理")]),_._v(" "),v("ul",[v("li",[_._v("正向代理：代理的对象是客户端")]),_._v(" "),v("li",[_._v("反向代理：代理对象是服务器")]),_._v(" "),v("li",[_._v("正向代理的作用：\n"),v("ul",[v("li",[_._v("隐藏客户端身份")]),_._v(" "),v("li",[_._v("绕过防火墙")]),_._v(" "),v("li",[_._v("Internet访问控制：可以根据ip设置谁能上网谁不可以")]),_._v(" "),v("li",[_._v("数据过滤：当请求的数据返回到代理服务器上，判定为不健康的数据，就可以不返回给客户端")])])]),_._v(" "),v("li",[_._v("反向代理的作用\n"),v("ul",[v("li",[_._v("隐藏服务器身份")]),_._v(" "),v("li",[_._v("安全防护")]),_._v(" "),v("li",[_._v("负载均衡：多个客户端向一个负载均衡服务器请求，在由负载均衡服务器分发到不同的服务器集群进行请求，像淘宝秒杀活动就需要\n"),v("ul",[v("li",[_._v("因为负载均衡服务器只是做一个转发，并没有做很多运算（查数据库之类），所以它不会像只有一台服务器一样消耗性能")])])])])]),_._v(" "),v("li",[_._v("Fiddler、Charles抓包工具也是代理的原理，但Wireshark的原理是，底层驱动，拦截网卡上流过的数据")])])])}),[],!1,null,null,null);l.default=i.exports}}]);